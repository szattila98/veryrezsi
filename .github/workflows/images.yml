name: Build & Publish Docker Images

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  publish-client:
    name: Publish Client image
    runs-on: ubuntu-latest

    steps:
      - name: Wait for Client checks to succeed
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          check-name: "Build and Check Client (18.x)"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Authenticate into AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Client - Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rezsi-client
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./client
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  publish-server:
    name: Publish Server image
    runs-on: ubuntu-latest

    steps:
      - name: Wait for Server checks to succeed
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          check-name: "Server Test Suite"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Authenticate into AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Docker image builder (Buildx)
        uses: docker/setup-buildx-action@v2

      - name: Server - Build, tag, and push image to Amazon ECR
        uses: docker/docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rezsi-server
          IMAGE_TAG: latest
        with:
          context: ./server
          tags: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-database:
    name: Publish Database image
    runs-on: ubuntu-latest

    steps:
      - name: Wait for Client checks to succeed
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          check-name: "Check SQL scripts"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Authenticate into AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Database - Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rezsi-database
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./database
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
